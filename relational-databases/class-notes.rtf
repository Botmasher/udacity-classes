{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11380\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 Databases
\b0 \
- in memory (ephemeral, like program vars) vs.\
durable storage:\
	- key-value store\
	- navigational DB\
	- relational DB\
		- not just store, but flexible tools for querying and summarizing\
		- constraints: rules to ensure changes to data are consistent\
\
- all values in a column have same type, but also same meaning\
	- string or int data has different meanings in different columns\
\

\b Tables
\b0 \

\b HEADER
\b0  - table name and names and types of columns\

\b VALUES
\b0  - data in rows\

\b Aggregation
\b0  - doing things with data values in multiple rows, e.g. Counting, min, max, avg\
\
Running a query against database still returns a table. Tells how many rows.\
	- use \'91as X\'92 to name the returned table (instead of ?\'92s)\
\
Database usually has multiple tables in it.\
\
Things in different tables can refer to same thing. But they\'92re different kinds of sentences.\
	- ids get referenced because of possible duplicate strings or other values\
	- 
\b uniqueness
\b0  of keys = numerical ids (most database systems can do this for you)\
	- 
\b primary key
\b0  - way of identifying. Some things (like countries) are unique and id\'92able by name\
\

\b Join
\b0  to derive new result table from existing tables.\
	- think about the kind of data you\'92d need to join when structuring each table\
\

\b SQL basics
\b0 \
- datatypes are complicated and have different names and distinctions than scripting langs\
	- Strings: text type, but others exist like char and varchar\
	- Numbers: int type, etc.\
	- Date and Time types - have to put SINGLE QUOTES!! 2012-11-23 is an integer expression\
- Query formula:\
	- SELECT (data) FROM (tables) WHERE (col-x = \'91value\'92 AND col-y = \'91value\'92)\
- Comparisons = < > != >= <=\
\
- SQL is tough/varied with respect to table columns and rows listed in a standard way. \
\

\b SQL select clauses and adjusting returns
\b0 \
*			select all\
order by		choose field to order results\
asc/desc		after order by\
limit x			how many results to return\
offset n		how far into results to start\
min/max(field)	return smallest/largest value for column\
group by		combines rows into summary rows for aggregates (instead of individual rows)\
			- only with aggregations like count, sum\
as			gives column a name\
\
Why not just do work in script lang?\
- count is like length, and limit is like slicing, and order is like key:val, BUT\
- SPEED and SPACE. Python can take 1 sec to go thru 1 million items. SQL is faster.\
- the big speedup is 
\b INDEXING
\b0 . not so much this course, but look it up!!\
\

\b SQL adding to table
\b0 \
- INSERT into table(col1,col2) values(\'911', \'922\'92)\
- column names are optional, unless you just want to add those specific columns\
- Inserts are simple, and just add a row to a table\
- UPDATE table SET column=value WHERE restriction;\
	- like select, without WHERE restrictions it applies to every row (not usu desirable here!)\
	- WHERE content LIKE \'91%string%\'92;	lets you match pattern, e.g. in long strings\
- DELETE from table where restriction; \
\

\b SQL JOIN
\b0 \

\i select T.thing, S.stuff from T join S on T.target = S.match
\i0 \
OR you can do it simply (and more commonly in real code):\

\i select T.thing, S.stuff from T, S where T.target = S.match
\i0 \
\

\b Aggregating
\b0 \
Note that when you
\b  count(*) as col_name
\b0 , you CANNOT where col_name=n\
	- the value of col_name comes from COUNT and GROUP BY, but\'85\
	- WHERE always runs before aggregations, on the underlying tables\
	- SOLUTION: use 
\b having
\b0  as easy way to run after. 
\b Subselects
\b0  are more complex, but work\
Use GROUP BY col 
\i before
\i0  HAVING aggregate_col\
\

\b Opening up the Database Black Box with Python
\b0 \
- SERVERS <-> PYTHON CODE <\'97DB-API METHOD CALLS \'97> SQLITE <\'97> DATA\
- Systems (eg. SQLite, PostgreSQL, MySQL) all have different DB-API modules. Here psychopg2\
\
import 
\i dbapi_name
\i0 \
conn = dbapi_name.connect(\'93Session_Name\'94)\
cursor = conn.cursor()\
cursor.execute (\'93query\'94)\
# if query inserts, run this\
conn.commit()\
results = cursor.fetchall()\
conn.close()			# always close your connections! stale connections take up resources\
\
Cursor can .execute(query), fetchall, fetchone\
Connection can commit() or rollback() if make changes\

\b Atomicity:
\b0  the change happens as a whole or it does not happen!\
\
Browsers use SQL database to store cookies and web history\
\
\

\b Using remote terminal to edit database
\b0 \
- VM, vagrant, then git clone it\
- go to vagrant dir\
	- vagrant up\
	- vagrant ssh\
- now you can psql\
	- psql dbname	# .sql database to work on\
	- now type sql\
	- \\d posts		# see the types the columns are along with their names\
\

\b ERRORS AND ATTACKS
\b0 \
- output sanitization: store whatever user sends as is, just make sure it can\'92t get out to harm others\
- input sanitization: clear out bad data before it ever gets into my database.\
	- when implemented, still must clean out any bad data already in database\
\

\b Sanitizing inputs against SQK injection attacks
\b0 \
- use python %s string insertion with sql insert statements\
- make sure the inserted string var is part of a tuple (string_varname,)\
- documentation warns NEVER to use + concatenation or % interpolation on strings alone here!\
\

\b Script injection attacks
\b0 \
- your db may see it as text but avoid the browser seeing it as script\
- use BLEACH for python (can install with pip)\
\
\

\b Normalized Design
\b0 \
- tables in database match relationships that are really there among the data.\
{\field{\*\fldinst{HYPERLINK "http://www.bkent.net/Doc/simple5.htm"}}{\fldrslt http://www.bkent.net/Doc/simple5.htm}}\
\

\b Deeper into SQL
\b0 \
- normalized forms\
	- Every row has the same number of columns\
	- > 0 columns are part of the key\
	- Any other columns in the table have to describe something about the key\
	- non-key columns do not describe other non-key columns (hence splitting out into new relations)\
	- rows don\'92t imply relationships among the data that don\'92t actually exist\
		- e.g. mapping people their computer skills and native languages are two different relations\
- CREATE table name (column1 type [constraints], column2 type [constraints], \'85 [row constraints]);\
	- PostgreSQL knows crazy lots of types, MySQL less, SQLite stores lots as strings\
	- while possible to create tables from app code, this is a bad idea outside of initial setup\
		(think of it more like having your app rewrite its own code!)\
- CREATE / DROP database name [options];		can also drop tables\
	- these DO NOT come with warnings, so use with caution\
- Serial columns do sequence (internal data structure) - so do work for us.\
\
- JOINING table to itself\
	- done to compare data in that table to data in that table\
	- check which animals eat the same food as which other animals, or who lives in the same room\
		select a.id, b.id from table1 as a, table1 as b where a.val1=b.val1 and a.val2=b.val2;\
	- to clean up duplicate data, add restrictions:\
		where a.id != b.id\
	- 
\i or better
\i0 : to make sure not listed in alternating order:\
		where a.id < b.id\
\

\b SQL primary and foreign keys
\b0 \
- 
\b Primary key
\b0 \
	- put after the column\'92s type when have one key in table\
	- put after all columns when using multiple primary keys (e.g. Postal Code, Country if using both)\
- Inserting a duplicate primary key:\
	- SQL error (it doesn\'92t insert or overwrite the old one, nor does it delete the new one)\
	- python will return an exception\
	- You\'92ll have to use rollback() on your db connection\
- Inserting missing keys\
	- db can let you know that a missing/incorrect value was entered as long as you set up tables to do it\
	- create table sales (sku text 
\b references
\b0  products(sku), sale_date date, count integer);\
		- note that since (sku) is same name in products table, it\'92s optional in this example\
		- references is a bit like type checking. It maintains \'93
\i\b referential integrity
\i0\b0 \'94\
- Column with references constraint is called a 
\b foreign key
\b0 \
	- a table often has 2 or more foreign keys\
	- usually a foreign key will point to the primary key of the referenced table (to uniquely id a row)\
	- mastering foreign key relationships is essential to understanding relational databases\
	- if a pair of foreign keys should be used once (e.g. voting on posts), that pair is a good primary key\
\

\b Aggregates over the result of joins
\b0 \
- Looking for key in the first table that doesn\'92t exist in the second joined table causes unexpected returns\
	- you might want how many of each sku (table 1) has been sold recently (table 2)\
		- the straightforward query will list all skus that exist in table 2\
		- but if it hasn\'92t been sold in table 2, it won\'92t be returned with 0 (or at all!)\
- 
\b Left
\b0  and 
\b Right outer 
\b0 joins (referring to tables to left/right of operator)\
	- regular (
\b inner
\b0  join) only returns results matching the join-on columns in two tables\
	- left/right also returns columns that left/right has but other doesn\'92t\
	- think about which table is the basic topic of your whole sentence\
		(above: for each sku, how many have I sold?) Clearly, I want a left join.\
	- /!\\ pay attention to aggr vars, as you might need to change them to spec columns in the other table\
\

\b Subqueries / Subselects
\b0 \
- result of query is a table\
- can select, join, aggregate, etc.\
- queries inside of queries! (outside gives avg of inside query)\
	select avg(hiscore) from\
		(select max(score) as hiscore\
		from batball\
		group by team)\
	as maxes;	# gotta name it! REQUIRED\
Even better uses: {\field{\*\fldinst{HYPERLINK "http://www.postgresql.org/docs/9.4/static/sql-expressions.html#SQL-SYNTAX-SCALAR-SUBQUERIES"}}{\fldrslt http://www.postgresql.org/docs/9.4/static/sql-expressions.html#SQL-SYNTAX-SCALAR-SUBQUERIES}}\
- Try answering, for example: which results are less than the average result?\
	- can use nested query ( = subquery)\
\

\b Views for refactoring and reusing queries
\b0 \
- a 
\b view
\b0 : select query stored in db in a way that lets you use it like a table\
	create view viewname as select\
- Say you have a huge table, but only query four of the columns. Store those as a view!\
- Updates and delete rows in some views, not others (think about aggregate functions)}