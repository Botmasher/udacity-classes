LESSON 2: CHAINING PROMISES

- chain .then and .catch to perform chains of async work
- example fetching and displaying first exoplanet thumb

	// see full code in exoplanet explorer's app/script/app.js
	getJSON('someurl.url/someresultshere.json')
	.then((response) => {
		addSearchHeader(response.query); 		// adds txt in an innerHTML h2
		return getJSON(response.results[0]); 	// pass to the next .then
	})
	.catch(() => {
		throw Error('Search Request Error');
	})
	.then((planetData) => {
		createPlanetThumb(planetData); 			// creates and appends thumb elem
	})
	.catch((error) => {
		addSearchHeader('unknown');
		console.log(error);
	});

- .catch vs second .then callback
	- can also catch rejects by passing callback as second .then arg

	new Promise(...)
	.then((res) => {...}, (e) => {...});

	- in fact when they're doing work in same link of the chain they're equivalent
	- HOWEVER second callback won't see errors caught in first callback!
	- that and readability make it recommended to use .catch
	- actually 2 diffs
		(1) .then 2nd callback does not catch errors in first callback, unlike .catch
			- "can't call both" : 	.then(resFunc,rejFunc);
			- "can call both!"	: 	.then(resFunc).catch(rejFunc);
		(2) "resolve" does not always mean success!
			- it's a subtle point but it's NOT the opposite of reject
				https://jakearchibald.com/2014/resolve-not-opposite-of-reject/
			- rejection callback is called if x passed to resolve(x) is
				(a) a promise that rejects
				(b) undefined

- Differences between error handling strategies
	- chaining a .then(undefined, function(e){...}) to handle catch errors
	- using .catch()
	- passing both of two args to .then
	- writing a recovery() method to get chain back on track and resolve if sth goes wrong
		- this could be combined c above - in error func you do:  return recovery();
	
	// consider what will be logged if errors occur on specific lines below
	asyncPromise('someobjects.json') 	// if err here, logs '13'... think about it
	.then((data) => {
		urls = data.urls;				// if err here, logs '13'
		return asyncPromise(urls[0]);
	})
	.then(undefined, () => {
		console.log(1);
		return recovery(); 		// "things get back on track" so skip to next .then
	})
	.catch((e) => {
		console.log(2);
		return recovery(); 				// if err here, logs '' bc only called if another error
	})										// (meaning found error in first .then)
	.then(() => {
		console.log(3);
		return asyncPromise(urls[1]);	 // if err here, logs '34', noseriouslythinkaboutit
	})
	.then(asyncPromise, () => {
		console.log(4);
		nopeJustGiveUp();
	});

- Series vs Parallel chaining
	- Actions In Series: one after another (ALWAYS true for sync code)
		- must be done when one action depends on another prev action
	- Actions In Parallel: all at the same time
		- reduces the amount of time to e.g. load a bunch of data
		- browser REALLY good at keeping track of requests so usu no collisions!
		- but things will be done in random order (unpredictable returns/resolves)

- How to make loaded things (like thumbs) appear in the right order?
	- in the same order as the search results
	- note that you DON'T need to request in series
	- BUT you can instead await for sequence on resolve side

	// refactor getJSON to load in the proper order as requests came in
	function getJSON('urlArray.url') {
		return get(url).then((response) => {
			return response.json();
		});
	}

	/* WORK IN SEQUENCE
	 * use a promise chain and append a .then() on each pass of a loop through your values
	 * iteration 1: 	promise.then()
	 * iteration 2: 	promise.then().then()
	 * iteration 3: 	promise.then().then().then()
	 * ...
	 * Thumbnail task:	Do this for the two tasks - get JSON, then load thumb
	 */
	getJSON('../dir/url.json')
    .then(function(response) {
      var sequence = Promise.resolve();    		// store a promise resolved w given value
      response.results.forEach(function(url) {	// the same forEach method (for loop)
        sequence = sequence
        .then(() => { 							// appending two thens to sequence
          return getJSON(url);
        })
        .then(createPlanetThumb);				// on each iteration, seq longer by 2 thens!
      });
    })
    .catch((error) => {
      console.log(error);
    });

    - each pass through the .forEach loop appends 2 .thens to the sequence
    - each .then will have to wait for the promise before it to resolve to execute
    - this makes the thumbnails show up in the right order
    - HOWEVER it makes this happen in series

    /* WORK IN PARALLEL
     * use a promise with a then on each pass of a loop through your values
     * iteration 1: 	promise.then()
     * iteration 2: 	promise.then()
     * iteration 3: 	promise.then()
     * ...
     * Thumbnail task:	Do this for the two tasks - get JSON, then load thumb
     */
    getJSON('../dir/url.json')
    .then((response) => {
    	var sequence = Promise.resolve(); 		// so far same as above
    	response.results.forEach((url) => { 	// still just as above
    		sequence.then(() => {				// NOW notice the .thens just overwrite
    			return getJSON(url);			// they will still execute though
    		})
    		.then(createPlanetThumb);
    	});
    })
    .catch((e) => {
    	console.log(e);
    });

    - each pass through .forEach gives sequence two .thens
    - the previous .thens will still execute
    - it's tricky to troubleshoot though, esp if not obvious it's happening in parallel!

- Checking in Console: Sequence vs Parallel
	- XHR in the Network tab
	- see the "Waterfall" column to check if resource bars in parallel or staggered in seq
	- turn on Show Overview (little bars icon) to see requests depicted in timeline

- Parallel c .map array method
	- returns an array
	- the array is a result of executing a func against every elem in array
	- with promises, no guaranteed resolve order! (bc all fire as loop thru)

	- use map (probably need a sequence) to load json thumbs in parallel

	getJSON('../dir/url.json')
	.then((response) => {
		response.results.map((x) => { 			// run func against each elem
			getJSON(x).then(createPlanetThumb);	// take adv of getJSON returns promise
		}); 									// so get url then use return to create thumb
	});				// add error handling