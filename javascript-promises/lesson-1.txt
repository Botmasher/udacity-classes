LESSON 1: CREATING PROMISES

- will use promises to request data about planets

- Async work
	- deferred and async computations
	- what is async work?
	- normally code executes statement by statement, immed one after other
	- JS Engine ensures unbroken timeline
	- assume instead you have NO idea when ASYNC operations will complete
		- network, events, threads
		- but anything that may return in any order

- Callbacks
	
	- default way to do async work
	- pass func to another func, then callback that func at later time
	- good, but wait: how do you handle errors?
	- VERY important to assume fault in network request
	- should JS errors be handled differently from network errors?

	- node makes error-first callbacks mandatory
	- this doesn't solve problem: you have to define and implement error handling
	- what if the callback is itself an async operation AND you need sth else to happen after?

	// imagine callback is async and requires another thing to happen after
	function loadImage(src, parent, callback) {
		let img = document.createElement('img');
		img.src = src;
		img.onload = callback;
		parent.appendChild(img);
	}

	// leads to Pyramid of Doom! - nested callbacks within callbacks
	loadImage('above-the-fold.jpg', imgContainer, function () {
		loadImage('below-the-fold.jpg', imgContainer, function () {
			loadImage('some-great-art.jpg', imgContainer, function () {
				loadImage('egyptian-pyramids.jpg', imgContainer, function () {
					loadImage('last-one.jpg', imgContainer);
				})
			})
		})
	})

	// same concept but with promises!
	var sequence = get('example.json')
	.then(doSomething)
	.then(doSomethingElse);

- Promise Stages
	(1) Wrapping. 	Promise
	(2) Thenning. 	Promise -value-> Action
	(3) Catching. 	Promise -value-> Recovery
	(4) Chaining. 	Promise -value-> Promise -value-> ...

- Promise terminology
	- FULFILLED / Resolved : 	it worked
	- REJECTED :				it failed
	- PENDING : 				still waiting
	- SETTLED : 				something happened!

- Promises vs Events timeline
	- event fires > event listener set :					DOES NOT execute
	- promise resolves > action for resolution val set :	DOES execute!

	// unlike event listeners, promises don't keep firing
	new Promise (function(resolve, reject){
		resolve('hi'); 		// promises only resolve once
		resolve('bye'); 	// never called
	});

	- BLOCKING
		- can BLOCK the main thread!
		- unlike events, promises can take as long to compute as needed
		- so their timeline can potentially extend beyond the point where resol val needed
		- i.e. the async work might settle AFTER resolution value accessed

	- "Think of them as try/catch wrappers around asynchronous work."

- "Promisifying": when to use promises

	- YES when loading data via AJAX request
		
		var data = get('data.json');
		data.onload = function () {
			analyze(this.responseText);
		};

	- NO when doing long, intense calcs over lots of data in main thread
		- promises run in the main thread so you gain nothing

		hugeArrayOfImages.forEach(function(i) {
			makeSepia(i);
		});

	- NO when creating a number of elements in order
		- creating and appendind DOM elements is synchronous
		- maybe if these were img elems or external data

		data.forEach(function(d) {
			var div = createDiv(d);
			body.appendChild(div);
		});

	- YES when using web workers
		- e.g. to post messages back and forth btwn main thread and a web worker
		- JS running in background while keeping the main thread free
		- www.w3schools.com/HTML/html5_webworkers.asp
		
		var worker = new Worker('worker.js');
		worker.postMessage(data);
		worker.onmessage = doSomething;

- Promise as Try-Catch Wrapper
	- a try-catch wrapper that finishes at an unpredictable time
	- can store as variable
	- OR can just work on it right there
	- pass a function to the promise with resolve, reject
		- resolve and reject are two callbacks that you pass in
		- use these to run when something works or 

	// working on promise as a variable
	var promise = new Promise(function(resolve[, reject]) {
		var value = doSomething();
		if (itWorked) {
			resolve(value);
		} else if (somethingWentWrong) {
			reject();
		}
	}).then(function(value) {
		// success!
		return nextThing(value);
	}).catch(rejectFunction);

	// working on promise right there
	new Promise(function(resolve, reject){
		var img = document.createElement('img');
		img.src = 'image.jpg';
		img.onload = resolve;		// queues up the func passed to .then
		img.onerror = reject; 		// note that these are NOT the last code executed in func!
		document.body.appendChild(img);
	})
	.then(finishLoading)
	.catch(showAlternateImage);

	- when resolve or reject called, the promise has been "settled"
	- once settled, the next part of the chain runs
	- usually next part of the chain is a .then or a .catch
	- any value passed to resolve or reject is used by subsequent .then or .Catch
	- if no arg passed, the method simply receives "undefined"

	var promise = new Promise(function(resolve[, reject]) {
		var value = doSomething();
		if (itWorked) {
			resolve(value); 			// .then with resolved value
		} else if (somethingWentWrong) {
			reject();					// reject called c 0 args
		}
	}).then(function(value) {			// fulfill value passed
		return nextThing(value); 		
	}).catch(rejectFunction);			// reject passes undefined (bc called c 0 args)

	- the value passed can be a Promise!
		- if the value is a Promise, it executes FIRST!
		- once it evaluates, its value will be passed to next link (.then) instead

	- resolve and reject have the same syntax
		- resolve leads to the next .then in the chain
		- reject leads to the next .catch in the chain

	- .catch also called if JS error somewhere in body of Promise
		- there's more to error handling; see next lesson

	- "this" inside in scope of Promise is the Global Object
		- Window function when I log it out
		- will be different c ES2015 if you use arrow func
		- but correct answer is the global obj

- Transition from document.readyState to "thening"
	- you've so far just done document.readyState stuff
	- three possible states
		- loading: 		self explan
		- interactive: 	subresources like imgs and css yet to load (DOMContentLoaded event)
		- complete: 	loaded everything
	- insert readystatechange between these events

	// wrap event listener in a Promise so it resolves when DOM is interactive!
	// 		- i.e. I want it to resolve when the readystate is no longer "loading"
	//		- no need for error handling; if page not ready it just won't display anyhow
	//		- chain by using .then to do some work after you resolve
	
	// ... go from this listener
	document.addEventListener('readystatechange', function() { ... }); 

	// ... to this ready func which you can call inline
	function ready() {
		new Promise( (resolve) => {
			document.addEventListener('readystatechange', () => { 	// fire when state changes
				if (document.readyState !== 'loading') resolve(); 	// resolve if interactive
			});
		})
		.then( () => {
			myWrapperResolvedFunction(); 				// do something when resolved
		});
	}

	// better and more robust answer - credit: Jake Archibald
	function ready() {
		return new Promise(function(resolve) { 				// return the created promise
			function checkState() { 						// same code we ran above in func 
				if (document.readyState !== 'loading') {
					resolve();
				}
			}
			document.addEventListener('readystatechange', checkState); 	// pass our func
			checkState(); 		// run func to catch state change (interactive) before promise!
		});
	}
	// chain when calling (since returns a promise) rather than thening to the promise above
	ready().then(wrapperResolved);

	- USE THAT technique
	- it's a useful one for checking and doing stuff as the DOM loads
	- pay attention to and know your DOM loading events!

- Exoplanet Explorer