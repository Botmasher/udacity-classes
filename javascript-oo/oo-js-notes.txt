OO JS

SCOPE
- lexical scope: in code (what usually think of)
- execution context or in-memory scope: follow along as program being run
	- e.g. multiple invocations of function create new contexts
	- nested, with outer nest being global context
- consider bindings in execution context when evaluating or predicting a program's output
- think of object properties and methods as keys with different values
- really think "what is the interpreter doing?" and in-memory scope when writing your code
- use === for strict identity comparison

CLOSURES
- allow access to variables in function scope even after function returns
- return values, global vars, settimeout
- consider when comparing what values will be in different execution contexts

KW THIS
- NOT the current scope, not the scope invoked from, not the execution context...
- IS typically object to left of dot when calling method (this in scope of that method)
- if no dot, global context, then this=<global> in body of that function
- functions called with .call explicitly set binding for this as first arg
	- myfunc.call (this_arg, function args)
	- this now refers to object of that added argument this_arg
- this in global used to refer to <global>, but now doesn't? undefined/error?
- new myobject.myfunc() creates a new object every time, so this binds to that new object in myfunc
- what do you think this is bound to in running settimeout?
	- Settimeout(obj.method,1000) does NOT pass obj, ONLY the callback function, so <global>

PROTOTYPE CHAINS
- when access a property on an object, looking that up as a key to find associated value
- interpreter provides value "undefined" when does not find value at that key in that object
- var newObj = extend({}, myObj);
	- one-time copy of properties from myObj to {}
- var newObj = Object.create(myObj);
	- ongoing use of myObj as "up the chain" fallback for properties undefined in newObj
- Prototype is the top-level object up the chain from all other objects
- Object Prototype .contstructor property is Object
- Array Prototype .constructor is Array

OBJECT DECORATOR PATTERN
- {} to represent in-memory object
- decorator function: takes object and augment it with a property
	- convention to use adjectives in name for decorator functions
	- use "this" kw to refactor functions that change an object's property, then add function to object in decorator function
- strict comparison shows that two objects returned from same function are two different objects
- obj decorator pattern normally used to add properties to objs that already have properties

FUNCTIONAL CLASSES
- classes as functions to manufacture fleets of similar objects
- only diff from decorator is that it also BUILDS the class it will augment
- functional class pattern produces instances of the class
- still results in duplicated methods (brand new functions every invoke of constructor)
- Functional Shared Pattern builds methods outside of class constructors
	- /!\ Memory saving /!\ avoid repeated visits to that code, write functions outside of the class and assign to properties in constructor
	- use parameter this when writing those outside functions to refer to obj even though you don't have access to that obj variable inside the constructor closure
	- problem that you're naming methods in two places (when created and also inside the constructor when assigning)
	- instead use extend(obj, methods) and write functions within object methods={};
	- add that methods {} as property of constructor function (MyClass=...; MyClass.methods=...;)
- Note that functions are objects, so they can store properties
	- no interaction between properties and the behavior when you invoke that function
- if a function produces objects with roughly same interfaces of properties, think of it as a class
	- gets into cross-language debates over whether or not this should be the case

PROTOTYPAL CLASS
- Recall that prototype chains delegate failed property lookups up the chain
- object literal notation {} doesn't let us define what the prototype of the object will be
- delegate to fallback prototypes instead of copying methods like Functional Shared Pattern did
	- as above, use Object.create -- Object.create(Car.prototype);
	- pass in the Obj.methods {} from before into the Object.create()
	- now on lookups, finding nothing will DELEGATE failed lookups "keys" up the chain
	- allows us to skip expensive step of copying properties when building new objects
	- now we add new methods from methods object
- this delegate pattern was so useful that it's now built into the language
	- instead of key .methods, it's .prototype
		Car.prototype =  { methodName : function () {} };
	- can even define directly on prototype:
		Car.prototype.move = function () {};
	- prototype vs method
		- purely cosmetic, no effect on in-memory model at runtime
		- there's no delegation of failed lookups to Car.prototype
		- the .prototype is just for storing things (mentally, it's a .methods list)
- this property .prototype is ambiguous
	- the instance's prototpye is now Car.prototype
		- delegate failed lookups to the prototype (e.g. carInstance doesn't have method but Car.prototype does)
	- Car's prototype is Car.prototype BUT this means something different:
		- failed lookups fall back to the FUNCTION prototype (it's a function after all!)
		- this is consistent: where all other function objects delegate failed lookups
	- "object1's prototype is object2" thus has two senses
- every .prototype has a .constructor pointing back to the object it's built with
	- Car.prototype.constructor is Car itself (the constructor function is itself)
	- myCarInstance.constructor is Car (same constructor function)
	- console.log will show the memory value of that function (Car in this case)
- INSTANCEOF sees if left operand found anywhere in right operand's chain:
	- myCarInstance instanceof Car
	- remember that assigning var someCar = Car(); assigns to Car itself, and does not create an instance down the chain
- no discussion of decorator pattern (adding methods within constructor function)
	- why not? as he sees it, the goal in prototypal pattern is shared methods

PSEUDOCLASSICAL PATTERN
- attempts to resemble Class system of other languages with some simple syntax
	- abstract common logic from our constructor function
	- every object is created with .prototype
	- every object is returned
	- these would be repeated
- kw "new" makes our function run in "constructor mode" instead
	new Obj (value0,value1...)
	- "inserts" code into function MyObj returning Object.create(MyObj.prototype);
	- refactoring a class constructor function to use the keyword "new" implies removing those create and return lines from the function
- now your pseudoclassical class is just a named function with some lines for adding keys / properties, instantiated with the "new" keyword
- pseudoclassical pattern has some performance optimizations in JS
- Pseudoclassical, Prototypal and Functional Shared all have common division
	(1) add methods in a function, e.g. prototypal pattern: MyClass.prototype.method1 = function() {};
	(2) add properties in constructor function (whether or not use "new") that allow each instance to specify different values for that property
	(3) instantiate those classes outside of the constructor and key/property definitions
- NOT right vs wrong, but techniques with advantages and disadvantages
	- In functional pattern, recall that all but instantiation was done in the body of one single Class function. Based on needs, this may be an asset or a drawback

SUBCLASSES AND SUPERCLASSES
- NB pseudoclassical pattern for subclasses much more documented online
- what if you want to add methods just to some uses of a class?
	- na√Øve solution: copy code from class, rename, refactor, add methods
	- BUT now lots of duplicate code, and only those new methods differ
	- instead of manually duplicating, make a SUPERCLASS function
		var Car = function () { var obj={properties}; //return obj }}
		var Van = function () { var obj = Car(); //+addtl props +return }
- This uses the functional code paradigm, but what about with kw "new"?

PSEUDOCLASSICAL SUBCLASSES
- still need functions for the superclass and the subclass
- create the superclass function
	- can add methods within function BUT more function objects than needed
	- recall instead the pattern X.prototype.methodName = function () {};
	- define those shared properties outside of the constructor function!
- pitfalls of creating pseudoclassical subclassses
	- take expected input params
	- DON'T just repeat property defs from the superclass; pass params up
		- usually superclass constructor has much more code than subclasses
	- DON'T instantiate "new Superclass();" - creates another in-memory obj
		- "this" in superclass constructor will refer to new instance of SC
		- you're already getting a brand new obj from using "new" inline, don't need a second within subclass constructor
	- DON'T assign this=new Superclass();
		- can't assign to this the way the interpreter can
	- DON'T just call the superclass function like Superclass();
		- kw "this" just refers to the global object
		- any params would end up as global vars pointing to some values
		- think for a moment about the above points. Why do they happen?
	- DO use .call method from lessons ago: Superclass.call(this, params);
		- "extra" first argument will bind to "this" in scope of superclass
		- pass in so that parameter "this" is bound to subclass instance
		- now superclass this.propName = prop1 will assign kvs to subclass
		- BUT instances now delegate to Sub.prototype NOT Super.prototype
- Setting up a prototype relationship
	- ABOVE subclass wiring doesn't delegate method lookups to superclass
	- you're actually delegating to Object.prototype!
	- to access superclass methods, attach sub.prototype to super.prototype
	- lookups should fall through from instance to subclass, then from subclass to superclass
	- CANNOT officially do Sub.prototype.__proto__ = Super.prototype
	- DO NOT do common mistake of Subclass.prototype = new Superclass();
		- invokes Superclass function every time
		- what if needed to pass constructor params?
			- paramName.valueOf() would be undefined and constructor broken
		- this was once prescribed before Object.create(ClassName);
	- DON'T Sub.prototype = Super.prototype (two pointers to same object)
	- DO overwrite Sub.prototype = Object.create(Super.prototype);
		- /!\ do this OUTSIDE of the subclass constructor
		- using Object.create copies the properties of Superclass prototype
		- now failed lookups fall through to the superclass prototype
		- unlike "new Super()", does NOT instantiate new classes
	- OR do it in the constructor function directly
- Zipping up prototype relationship
	- /!\ do this OUTSIDE of the subclass constructor
	- Sub.prototype = Object.create(Super.prototype) replaces its .constructor with Superclass
	- replace that by Subclass.prototype.constructor = Subclass;
	- now your subclass reports to the right constructor

FINAL PROJECT
- this is all basic out-of-the-box OO stuff in JS, including patterns on top of what's available
- now go grab our game assets and make a simple froggery game!
- Forked instructor's base code with engine.js, app.js, styles.css and img sprites
- Completed basic functional requirements for the game
- Abstracted classes using Pseudoclassical super/subclass pattern
	- GameObject -> Enemy, Player -> allEnemies[0,...n], player
- Implemented extras:
	- GameController has score and instantiates player obj, enemy array
	- score (currently logged to console offscreen)
	- player start screen with char sprite choice, then pass param to main game
	- change player movement from (my switch - not an ‚Äúextra‚Äù for the class)
	- display score, simple instructions and updates on html page during play
	- test adding one pickup
	- develop pickup class and instantiate array of random pickups through GameController
	- implement hearts/lives counter and gameover.html final score page
	- add sound effects and music in folders and script their play in app.js
	- add escape hatch that shows up at 100 pts and gives you +100 to leave now