HTML5 Canvas

BASICS
- adding charts, maps, art: can do with CSS or Flash, but Canvas is easier
- Set of functions for shapes, patterns, animations
- Going to make memes in this class

- Canvas tag with optional width and height to allocate space on page
<canvas id="c" width="250" height="250"></canvas>

- Grab canvas from JS code
	<script>
	var c = document.querySelector("#c");
	var ctx = c.getContext("2d"); 		// or "3d"
	var img = new Image();

	img.onload = function () {
		// do stuff once image is loaded
		ctx.drawIamge(img, 0, 0, c.width, c.height);
	}
	img.src = "example.jpg";			// loaded asynchronously!
	</script>

- now use methods to start drawing!
- use coordinates to figure out where to draw (0,0 is top left)
- loaded async, so do stuff .onload like context's .drawImage() function: 
	.drawImage(x, y, width, height)

- Tainted Canvases may not be exported!
	// saving the image like this will throw error
	// if you aren't hosting the images directly
	var savedImg = c.toDataURL();
	window.open(savedImg);
	- to do this straightforwardly, need own server locally or online
	- can still save the image the old fashioned right-click way

- Drawing rectangles
	ctx.fillRect (x, y, width, height);
	ctx.strokeRect (x, y, width, height);

- Clear the rectangle
	ctx.clearRect (...); 		// your rectangle dimensions

	// or by filling with the bg color
	ctx.fillStyle = "white";	// or whatever the bg color is
	ctx.fillRect (...); 		// your rectangle dimensions 

- Clear the entire canvas
	// clear rect over the entire canvas dimensions
	ctx.clearRect (0, 0, c.width,c.height);

	// changing height or width clears it, too
	c.height = c.height;

- Drawing a Path
	// like a pen moving on the canvas
	ctx.beginPath();		// we will be drawing a new shape
	ctx.moveTo (x0, y0);	// move pen on page to pos0
	ctx.lineTo (x1, y1);	// draw line until a new pos1
	ctx.lineTo (x2, y2); 	// draw a line until reaching pos2
	ctx.lineTo (x0, y0);	// draw a line until reaching pos3

	// now fill or stroke path to see the triangle!
	ctx.fill(); 	// 	OR 	ctx.stroke();

- Scale, Rotate, Translate apply to all subsequent commands until they're reversed
	ctx.scale(x,y);				// scale subsequent commands
	ctx.rotate(angleRadians);	// rot subsequent commands
	ctx.translate(x,y);			// move subsequent commands

- canvas .save / .restore put state on / pop state from stack

- Colors: name colors, hex colors
	- like other things, only apply to fills/strokes AFTER color assigned

- Text
	// can fill or stroke text just like the shapes
	ctx.strokeText ("My Text!", 50, 50);
	ctx.strokeText ("My Text!", 50, 50);

	// canvas also includes font style and line width

IMAGE EFFECTS PIXEL BY PIXEL
- they put together a neat silent film using greenscreen and canvas!
- no sound in Canvas
- pixels -> RGB(A)
- Filters for image editing - users can do things & save locally!
- Image backing the canvas is ImageData object
	ImageData
	- width
	- height
	- data (Uint8ClampedArray)
		unsigned (pos values only), 8-bit integers, one giant non-nested list
- ImageData functions
	createImageData
	getImageData
	putImageData
- Use to change every nth pixel, create a grayscale effect, invert colors by subtracting rgba vals from 255

ANIMATION
- Moving images make effects more interesting
- Videos have events we can subscribe to and listen
	<video id = "v" controls loop src="test.mp4"></video>
	<script type="text/javascript">
		document.addEventListener('DOMContentLoaded', function() {
			var v = document.querySelector('#v');
			v.addEventListener('play', function(){
				if (v.paused || v.ended) return;
					draw();
			});
		});
	</script>
- The above shows a single frame of the video. Play events are fired when user clicks play!
* - Common to animate by calling draw function to setInterval or setTimeout, BUT
* - requestAnimationFrame is "the better way"!
	- this is a basic browser API for the update loop process
	- ONLY requests when last frame drawn and window actively used
	
	function draw(){
		canvas.getContext('2d').drawImage(myVideo,0,0);
		requestAnimationFrame(draw);
	}

- INPUT is another thing we can work with over time
	- create a game loop!
	- use libraries: Kibo.js associates keycodes w common names
	- track mouse clicks with an event listener

	/* 
	 * 	Use the event's client X,Y and canvas offsets
	 *	to get canvas-relative position of each click
	 */
	function trackClick(event) {
		x = event.clientX - canvas.offsetLeft;
		y = event.clientY - canvas.offsetTop;
		console.log ("You clicked here: "+x+", "+y);
	}
	canvas.addEventListener("click", trackClick, false);