LESSON 2: FUNCTIONS

- Arrow functions
	
	- consider mapping function results onto an array
	- recall that map:
		- is a method on array's prototype
		- takes a function and runs it on every element in an array
		- gathers returned values up and makes a new array out of them
		- returns that new array
	const upperizedNames = ['jhiggly','scrumbly','tanuki'].map(function(name) { return name.toUpperCase() });

	- pass in an arrow function instead; note that the arg stays but kw and parens and braces are gone
	const upperizedNames = ['jhiggly', 'scrumbly', 'tanuki'].map( name => name.toUpperCase() );

	- take one more xample for practice
	const names = ["Ba", "Bababaaah", "Bansnu", "Bansnuchi", "Baddabaddasti"];
	const longNames = names.filter ( name => name.length>6 ); 	// assigns to array containing the 3 long names

- Arrow functions are "arrow function expressions" NOT declarations

	- can only be used when valid expression is evaluated
		- store in variable
		- pass as arg to function
		- store in object property

	- carefully consider the "confusing" syntax of storing in a variable
	const greet = name=>`Hello, ${name}!`; 		// stores function in variable greet
	greet ("Shampoozo"); 						// returns "Hello, Shampoozo!"

	- parameters with parens
	
	const sayHi = () => console.log("Hi you!");
	sayHi();

	const orderShake = (flavor, thickness) => console.log (`Here's your ${flavor} shake, nice and ${thickness}!`);
	orderShake ('chocolate', 'runny');

	- some devs use _ (underscore) for single unused param

	setTimeout(_ => { 					// instead of ()=>{}
		console.log("Running test");
		test.start();
	}, 2000);

- Concise vs Block Body syntax

	- concise: no braces around a single line automatically returning the expression
	- block body: more lines wrapped in braces and a return statement

	- these are requirements: you can't write e.g. a concise one with a return statement and no curly braces
	- these are requirements: you can't write e.g. a block body one without a return statement

- Arrow fn Gotcha #1: there is no such thing as an "arrow function declaration"
- Arrow fn Gotcha #2: the "this" keyword (of course! - more below)

- "THIS" kw
	- normally depends on how function is called
	- but with arrow it depends on WHERE it's located in the code
	
	- regular "this":
		
		const myTreat = new Treat('cake'); 		// inside Treat constructor, "this" is the new object
		const res = obj1.printName.call(obj2); 	// inside printName, "this" is obj2 (because explicit .call)
		data.teleport(); 						// inside teleport, "this" refers to data (its CONTEXT)
		teleport(); 							// no context, so "this" refers to global object (*)

		- (*) context-free "this" is UNDEFINED in strict mode

	- arrow function "this":
		- based on FUNCTION's SURROUNDING CONTEXT
		- so "this" value inside arrow function same as outside it!

		// here scoops does NOT incrememt
		function IceCream () {
			this.scoops = 0;
		}
		IceCream.prototype.addScoop = function() {
			setTimeout (function() {		// setTimeout called w func without new/apply/call
				this.scoops++; 				// so "this" refers to global object or to undefined
			}, 500); 						// meaning after 0.5 ms, IceCream's scoops would still be 0!
		};
		const dessert = new IceCream();
		dessert.addScoop(); 				// NaN!!: this.scoops is undefined, undefined+1 is NaN

		// one way around above: use closure
		IceCream.prototype.addScoop = function() {
			const cone = this;
			setTimeout (function() {		
				cone.scoops++;
			}, 500);
		};

		// but this is what arrow functions do!
		IceCream.prototype.addScoop = function() {
			setTimeout(()=> { 				// because of arrow notation,
				this.scoops++; 				// "this" inherits from surrounding context
			}, 500);
		};

		// imagine turning the whole thing arrow: "this" is now what it refers to outside func, global object!
		IceCream.prototype.addScoop = () => {
			...
		};

- Default function parameters (defaults)
	
	function greet (name='Student', greeting='Welcome') {
		return `${greeting} ${name}`;
	}

	// instead of if-clauses or ternaries like this
	function greet (name, greeting) {
		name = (typeof name !== 'undefined') ? name : 'Student';
		...
	}

- Defaults and destructuring (POWERFUL funcs!)

	- use destructuring to assign the array to variables

	function createGrid([width=5, height=5]) {...}		// takes array that defaults to [5,5]
	createGrid([]); 				// set to [5,5]
	createGrid([2]); 				// set to [2,5]
	createGrid([undefined,3]); 		// set to [5,3]

	- BUT createGrid() alone won't work bc still expects an array (like in createGrid([]) call above)
	- solve this with a default array

	function createGrid([width=5, height=5] = []) { ... } 	// now defaults to [] which destructures to [5,5]

	- can also destructure objects

	function createSundae({scoops=1, toppings=['Fudge']}) { ... }
	createSundae({});
	createSundae({scoops: 2});
	createSundae({toppings:['Caramel','Pecans']});

	// BUT createSundae() error, same problem as above, so default obj!
	function createSundae({scoops=1, toppings=['Fudge']} = {}) { ... }

	- REMEMBER that using destructuring allows you to have those variables at hand
	- so you don't need to look into that object for a .scoops property, it's destructured to scoops

- Object vs Array Defaults
	
	- remember that array elems are positionally based, resulting in need to skip defaults
	createSundae([undefined,['Caramel','Pecans']]); 	// worry about all the preceding elements

	- so objects are the way to go if you don't want to have to skip elements
	createSundae({toppings:['Caramel', 'Pecans']}); 	// call out just the key you care about

- Classes

	// sample of how they work in ES6
	class Treat {
		constructor (calories=250) {
			this.calories = calories;
		}
	}
	class Sundae extends Treat { 						// keyword "extends"
		constructor(flavor, calories, toppings=[]) { 	// constructor()
			super (calories); 							// keyword "super"
			this.flavor = flavor;
			this.toppings = toppings;
		}
		addTopping(topping) {
			this.toppings.push(topping);
		}
	}

- Classes in JS versus other langs
	- functions create objects, so "classes" are really just regular functions
	- ES6 doesn't change the way these work (under the hood it's just functions)
	- not a class-based language
	- prototypal inheritance is still going on under the hood
	- ES5 conventions:
		- create a function that acts as "constructor", storing relevant properties
		- attach further method properties to the prototype
		- call constructor function with "new" to create objects (or object.create in constructor)
	- ES6 conventions:
		- create a class with a name
		- inside the class, define a constructor function to store init properties
		- add class methods that all objects inherit inside the class scope (NO COMMAS)
			- this is still attaching to the prototype, despite the syntax
			- while these are inline after constructor, the constructor IS NOT same kind of method
			- constructor is a special method not on the prototype
		- call class with "new" (MUST use new) to create instances
			const myObj = myClass(); 	// Uncaught TypeError: Class constructor invoked without 'new'
	- these two syntaxes are EXACTLY the same under the hood

- Class is just a function
	
	- after defining a class, check its type
	typeof Treat;		// guess what? FUNCTION!

- Static methods

	- accessed directly on the class
	
	class Treat {
		...
		static fattenAll (treats) { 	// static kw
			for (treat of treats) {
				treat.calories+=100;
			}
		}
	}

- 