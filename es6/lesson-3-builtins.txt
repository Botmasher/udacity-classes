LESSON 3: BUILT-INS

- Symbols
	
	- unique identifier (usu) to identify properties within an object
	- imagine you want to add multiple of the same kind of properties to an obj
		- like bananas in a bowl, once you add >1, you start having to keep track of them
		- if you add a new 'banana' to an object, you just overwrite the prev 'banana'
		- common solution is to number them banana1, banana2, ...
	- symbols have an optional description but that string isn't the symbol itself
	
	const symNoDesc = Symbol();
	const b1 = Symbol('banana');
	const b2 = Symbol('banana');
	b1 === b2; 						// false

	- using symbols within an object
	const bowl = {
		[Symbol('apple')]: {color:'red'},
		[Symbol('banana')]: {color:'yellow'},
		[Symbol('banana')]: {color:'brown'}
	};

- Iterable protocol
	- for...of as a built-in iterable usable on any iterable object
	- any iterable object must implement the "iterable interface"
		- basically means it must contain a default iterator method
		- default method defines how obj is to be iterated
	- iterator method is avail via the constant [Symbol.iterator]
		- it's a zero arg func that returns an iterator obj
		- an iterator obj is an obj that conforms to the iterator protocol
	- iterator protocol
		- defines standard way an obj produces a sequence of value
		- really means that you have a process for determining how obj will iterate
	- obj becomes iterator when implements .next()
	- .next() returns an obj w two properties:
		- value (the next value in the obj)
		- done (boolean for done going through sequence of values)

	const digits = [0,1,2,3,4,5];
	const arrayIterator = digits[Symbol.iterator]();
	console.log (arrayIterator.next());		// Object {value: 0, done: false}
	console.log (arrayIterator.next());		// Object {value: 1, done: false}

	- iterating through an object

	// sample object
	const james = {
 	   name: 'James',
	    height: `5'10"`,
	    weight: 185
	};

	// generator function
	james[Symbol.iterator] = function* () {
    	const keys = Object.keys(james);
    	for (const key of keys) {
        	yield james[key];
    	}
	}

	let iterator = james[Symbol.iterator]();
	console.log(iterator.next().value); 		// 'James'
	console.log(iterator.next().value); 		// `5'10`
	console.log(iterator.next().value); 		// 185


	// change the next method to return what you want from an object
	// here getting the key as well as the value and done
	james[Symbol.iterator] = function () {
		let i = 0;
		const keys = Object.keys (this);
		return {
			next: () =>  {
				let done;
				if (i < keys.length) {
					done = false;
					i++;
				} else {
					done = true;
				}
				return { key: keys[i-1], value: this[keys[i-1]], done: done };
			}
		};
	}

- Sets
	- collections of unique elements
	- unlike array, cannot be dups

	const games = new Set({'Mario','Banjo','Cod','Borderlandias'});
	
	- .add() and .delete() an item from a set
	games.add ('Mario2'); 		// false if unsuccessful (like item already in set) but no error
	games.delete ('Banjo'); 	// false if unsuccessful (like item not in set) but no error

	- clear the set
	games.clear();

	- other properties
	games.size; 		 	// length of the array
	games.has('Mario'); 	// if item exists
	games.values(); 		// returns a SetIterator object
	games.keys();			// an alias for .values() for similarity with maps

	- sets are built-in iterables so:
		(1) you can use default iterator to step through each item in a Set one by one
		(2) you can use for...of to loop through items in a Set

	- (1) stepping through requires using .next on SetIterator values
	const iterator = games.values();
	iterator.next(); 		// Object {value: 'Mario', done: false}
	iterator.next(); 		// and so on...

	- (2) for...of as easier
	for (const game of games) { ... }

- WeakSets

	- can ONLY hold objects
	- is NOT iterable (no looping over or stepping through!)
	- doesn't have .clear()

	- why use? GC!
		- if you set an object to null it's removed from the set automatically
		- null objects are effectively deleted ones
		- so effectively this means you don't have to worry about your set pointing to deleted objects

- Maps
	- collections of kv pairs
	- maps are to objects as sets are to arrays
	- add kv using .set() c 2 args k,v
		- both k and v can be objects, primitives or a combo
		- use existing key won't add to map but won't return error (it's like Sets)
	- .delete() specific k
	- .has() to check if k exists
	- .get() to return value for k
	- .clear()
	
	const students = new Map(); 	// creates Map{}
	students.set('james@studerifics.com', {
		firstName: 'James',
		lastName: 'K',
		field: 'spachuchis'
	});
	students.set('julia@studerifics.com', {
		firstName: 'Julia',
		lastName: 'L',
		field: 'manuchis'
	});
		// now have Map{'james@...'=>Object{...}, 'julia@...'=>Object{...}}
	students.has('javier@studerifics.com'); 	// false
	students.get('julia@studerifics.com'); 		// returns the object
	students.clear(); 			// back to empty Map {}

- Maps: looping through Maps
	
	// (1) step through using Map's default iterator

	let iteratorForKeys = students.keys();		// or .values() to get values iterator
	iteratorForKeys.next(); 					// Object {value: 'james@...', done: false}

	// (2) loop through kv pairs using for...of

	for (const student of students) {
		const[k,v] = student;  		// it gives us arrays so k is student[0], v is student[1]
	}

	// (3) loop through kv pairs using .forEach()

	students.forEach((value, key) => ...); 		// do something with each v,k

- WeakMaps
	- only objects as keys (parallel to WeakSet, which is only objects)
	- not iterable (like WeakSet)
	- no .clear() method (like WeakSet)

	- GC: automatically alloc mem when needed and freed up when no longer needed
	- since only obj as key, null object frees up mem when GC runs

	const book1 = {title: 'Book 1 Title'};
	const book2 = {title: 'Book 2 Title'};
	const library = new WeakMap();
	library.set(book1, true);
	library.set(book2, false);

	- GC algorithms in JS
	developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#Garbage_collection

- Promises
	- do this thing now, then notify me when it's done so I can pick up where I left off
	- gives me a ticket saying what I ordered, then comes back to tell me it's done

	- give the promise the code that will be run async (as arg to constructor func) 
	- promise is fulfilled: resolve method (success) or reject method (failure)

	new Promise(function(resolve, reject) {
		window.setTimeout(function createSundae(flavor = 'chocolate') {
			const sundae = {};
			// build my sundae...
			if (/* out of my flavor */) {
				reject(`Sorry, all out of ${flavor}!`);
			}
			resolve(sundae);		// the data we want to return
		}, Math.random() * 2000); 	// start a few secs after making the request
	});

	- promises return obj IMMEDIATELY
	- obj's .then() method takes two funcs (one to run if resolve, other if reject)
	mySundae = new Promise(function(resolve, reject){
		// sundae code
	});

	mySundae.then(function(sundae){ 	// receives the resolve obj above
		...
	}, function(msg){ 		// here recieves the reject text above
		...
	});

	- (nod to udacity course on promises)

- Proxies
	- a proxy does work for / in place of another obj
	- sits btwn real obj and the calling code
	- calling code interacts with proxy instead of real obj
	- new Proxy() constructor
		- needs to know obj it will be proxy for
		- needs to know "handler": list of methods it will handle for the proxied obj
		- handler is among 13 different "trap" functions
		- if trap not defined, behavior sent directly to target obj

	// "Pass through" proxy c empty handler and no intercept
	const durtimus = {status: 'dirty'};
	const agent = new Proxy(durtimus, {}); 	// proxy for durtimus
	agent.status; 							// is 'dirty'!

	- .get used in handler to return obj info

	// "Get Trap" proxy c .get(target,property) handler
	const handler = {
		get(target, property) { 		// e.g. durtimus, .status
			return target[property]; 	// durtimus['status']
		}
	};
	const agent = new Proxy(durtimus, handler);
	agent.status; 		// intercepts call to property and returns the target prop thru

	// "Direct" feedback proxy return info
	// instead of return target[property], just have .get return e.g. some text mssg

	- .set() used in handler to change property
	const handler = {
		set (target, propName, value) {
			if (propName === 'payRate') { 	// if pay being set,
				value = value*.85; 			// take a commission
			}
		}
	};

	agent.payRate = 1000; 	// set the pay rate
	agent.payRate; 			// will read 850!

- Proxy traps
	- beyond .get and .set, other traps
	- apply trap: proxy handles being invoked (proxies for a func)
	- has trap: proxy handles using operator "in"
	- deleteProperty trap: proxy handles if a prop is deleted
	- ownKeys trap: proxy handles when all keys are requested
	...

- Proxy vs Getter/Setter methods
	- ES5 already had getters and setters! Why proxy?
	- needed to know before which properties get and set
	- you would get/set when initializing an object
	- now we don't need to know beforehand!

	// old way
	var obj = {
		_age: 5,
		_height: 4,
		get age() {
			console.log(`getting the "age" property`);
			console.log(this._age);
		}
		get height() {
			console.log(`getting the "height" property`);
			console.log(this._height);
		}
	};
	obj.weight = 100;
	obj.weight; 		// just logs "100"

	// new way
	const proxyObj = new Proxy({age:5, height: 4}, {
		get(targetObj, property) {
			console.log(`getting the ${property} property`);
			console.log(targetObj[property]);
		}
	});
	proxyObj.weight = 100;
	proxyObj.weight; 		// now logs out our formatted string!
