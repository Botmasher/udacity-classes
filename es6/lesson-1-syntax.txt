LESSON 1: SYNTAX

- Harmony = ES6 = ES2015, diff names for biggest update to JS

- let, const

	- using var gets us into trouble; what happens when isCold = false?
	function getClothing (isCold) {
		if (isCold) {
			var freezing = 'Grab your jacket!';
		} else {
			var hot = 'Grab your shorts!';
			console.log (freezing); 			// logs "undefined"!
		}
	}

	- hoisting: all vars raised to top of scope!
	function getClothing (isCold) {
		var freezing, hot; 						// it's as if vars declared here
		if (isCold) {
			freezing = 'Grab your jacket!';
		} else {
			hot = 'Grab your shorts!';
			console.log (freezing); 			// that's why it's "undefined"!
		}
	}

	- let and const scope to BLOCK, not to func
	- the let/const is stuck in a "temporal dead zone" btwn its {}
	- can only access let/const variable after they've been declared
	function getClothing (isCold) {
		if (isCold) {
			let freezing = 'Grab your jacket!';
		} else {
			let hot = 'Grab your shorts!';
			console.log (freezing); 			// NOW get reference error: freezing not defined
		}
	}

	- let can reassign but not redeclare within same scope
	- const must be assigned initial value, not reassigned (but can change val), not redeclared in same scope
	- const is strictest way to declare a variable; won't change assignment during lifetime of program
	let instructor = 'J';
	instructor = 'R';
	console.log (instructor);		// 'R'; SyntaxError identifier 'instructor' already declared if const

	- not really reason to use var anymore! (maybe in global vars? but this as bad practice worth ditching)

- template literals

	- previous clunky concatenation c e.g. teacher.name + " in " + teacher.room (or String ''.concat() method)

	- now template literals allow string interpolation, referencing object's properties inside expressions
	let mssg = `${teacher.name} has your report card in ${teacher.room}`;

	- template literals preserve newlines as part of the string!
	let note = `${teacher.name},

		Please excuse ${student.name}.
		He was hit by a stray tetherball.
	
		Thank you,
		${student.guardian};

	- the "embedded expressions" can also do operations, call functions, loops!

- Destructuring arrays and objects

	- extract data into distinct variables
	- old way of creating vars and assigning vals to each (say x,y,z for a vect) isn't truly destructuring
	- instead, like Python, specify extracted elements on left hand of assignment
	const point = [10, 2, -5];
	const [x,y,z] = point; 			// destructuring, where [] represent the array being destructured
	const [a,,c] = point; 			// destructuring, ignoring/discarding certain vals

	- or do it with {} for an object being destructured
	const circle = {
		radius: 10,
		getArea: function() {
			return Math.PI * this.radius * this.radius;
		},
		getCircumference: function() {
			return Math.PI * 2 * this.radius;
		}
	};
	let {radius,getArea,getCircumference} = circle; 		// selects properties by their name
	// NOTE getArea() when called no longer has ref to THIS.radius! SO it returns NaN!

- Object literal shorthand
	- remove repetition when object initialized with same property names as prev declared variable names
	let type = 'emerald';
	let color = 'green';
	let carat = '21.29';
	let gemstone = {type, color, carat}; 	// old way was type: type, color: color, carat: carat

	- remove 
	let gemstone = {
		type,
		color,
		carat,
		calculateWorth() {...} 				// old way was calculatWorth: function() {...}
	}

- Iteration

	- remember: const means can't be reassigned, NOT immutable
	const years = [1999,2000,2017];
	for (const i=0; i<years.length; i++) {		// iterator is const
		console.log(years[i]);
	}

	- for...in loop avoids keeping track of "counter" and "exit condition"
	for (index in years) {
		console.log(years[index]); 		// but still have to use index
	}

	- for...in loop big trouble if add to array's prototype
	Array.prototype.decimalHundredths = function () {
		for (let i = 0; i < this.length; i++) {
			this[i] = this[i].toFixed(2);
		}
	}
	// now if you for...in over the years array, the last will be this function def!!!
	// this is why for...in is discouraged over arrays

	- .forEach (actually an array method) works for arrays but has no way to stop/break

	- for...of for ANY iterable data type
	for (const year of years) {
		console.log (year);
	}

	- only loops over values in the object (not, say, additional properties on the prototype)
	- can stop or break at any time
	for (const year of years) {
		if (year % 2 == 0) {
			continue;
		}
		console.log (year);
	}

- Spread operator
	
	- expand or "spread" iterable obj into multiple elements

	const fruits = ["apples", "oranges", "strawberries"];
	const vegetables = ["corn", "peas", "carrots"];
	const produce = [ ...fruits, ...vegetables ];		// [fruits,vegetables] would just pack 2 arrays in there
	console.log (produce); 								// produce is just array of all of the elements combined

- Rest parameter

	- also three dots, allows rep of however many elements are left (the rest of the list)
	
	const order = [20.15, 18.65, 1.50, "kale", "tofu", "bread"];
	const [total, subtotal, tax, ...items] = order;
	console.log (total, subtotal, tax, items); 			// each is separated out; items now its own array

- Rest vs Spread (both syntactically ...)

	- spread is ...iterable that is spread out
		- like move one array's elems into an array instead of nesting it as a subarray
	- rest is ...iterable that packs the rest together into an iterable
		- like destructure the rest of the elements of an array into another
		- or like use a ...iterable to capture the rest of the args in a func call

	- spread like unpacking a box
	package = ["almonds","cookies","happiness"];
	console.log (...package);

	- rest like the opposite of spread, since it boxes everything back together
	printPackageContents ("chocolate", "fruit", "bread");
	function printPackageContents (...package) {
		for (const item of items) {
			console.log (items);
		}
	}

- Variadic functions (indefinite number of args)

	- old way: use the arguments object (array of all args)

	function sum () {
		let total = 0;
		for (const argument of arguments) {
			total += argument;
		}
		return total;
	}

	- but that's misleading: sum() apparently takes no parameters even though it can take indef num args
	- but that's opaque: if never worked with arguments object, might think where did it even come from?

	- instead use the "rest parameter"

	function sum(...params) {
		let total = 0;
		for (const param of params) {
			total += param;
		}
		return total;
	}

	// example: calculate average of unlimited number of args
	function average (...a) {

		// catch calls with no arguments
		if (a === null || a.length <= 0) return 0;

		// sum and average all values
		let sum = 0;
		for (const n of a) {
			sum += n;
		}
	
		return (sum/a.length);
	}