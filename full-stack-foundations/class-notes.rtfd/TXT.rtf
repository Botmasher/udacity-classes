{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww15080\viewh9460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 Data-driven web applications
\b0 \
- almost all of the sites you use on a daily basis\
- prereqs: OO Python, database and SQL, CSS and HTML to style, command line basics\
- use: ORM, frameworks (Flask), Vagrant\
\

\b CRUD\

\b0 - all actions a user takes on data-driven website\
- correspond to specific SQL keywords\
\

\b ORM: how to structure a DB-creating Python File
\b0 \
- imagine restaurant menu\
	- relation Restaurants: id, name\
	- relation for MenuItem: name, id, description, price, course (appetizer/main/dessert/beverage)\
- Pass queries as objects instead of strings\
	- allows for error checking\
	- transformed into query and sent to database\
	- SQL alchemy is FLOSS for Python\
	- already installed if using vagrant; otherwise visit their site\
- Using 
\b SQLAlchemy
\b0  for 
\b ORM
\b0 \
	(1) 
\b Configuration
\b0 : set up necessary modules\
		- doesn\'92t change much from project to project\
		- imports modules needed at beginning of file\
		- 
\b Base = declarative_base()
\b0  #base class pointing to declarative_base once imported\
		- creates instance of declarative base at beginning\
		- creates/connects database and adds tables and columns at end of file\
	(2) 
\b Class
\b0 : represents our data in Python\
	(3) 
\b Table
\b0 : represents the specific table in our database\
	(4) 
\b Mapper
\b0 : create vars for table columns; MUST add attribs! Example attributes:\
		- String(250), Integer, primary_key=True, relationship(Class), ForeignKey(\'93table.id\'94), etc.\
		- 
\b nullable = False
\b0 	# if this variable isn\'92t filled, we cannot create this row in the db\
- when you set a foreign key relationship, on the next line: 
\b table = relationship(Table)
\b0 \
\

\b How to CRUD with your new python DB (the one you just made above)
\b0 \
# you\'92ll first need to import some things\
from sqlalchemy import 
\b create_engine
\b0 \
from sqlalchemy.orm import 
\b sessionmaker
\b0 \
\
# our database, as described in the section above\
from database_setup import Base, Restaurant, Menu Item\
engine = create_engine(\'91sqlite:///restaurantmenu.db')\
Base.metadata.bind = engine\
\
# CRUD requires a session\
DBSession = sessionmaker (bind = engine)	# possibility to CRUD\
session = DBSession()	# open instance of the DBSession\
\
# now can call method from session\
# notice that we pass the first variable to the foreign key in the second table\
myFirstRestaurant = Restaurant(name=\'93Pizzeria Snausage\'94)\
cheese_pizza = MenuItem (name=\'93Cheese Pizza\'94, description = \'93Super fresh!\'94, course=\'93Entree\'94, price=\'939\'94, restaurant=myFirstRestaurant)\
\
# use session to store\
session.add(myFirstRestaurant)\
session.add(cheese_pizza)\
session.commit()\
\
# query to see objects exist\
session.query(Restaurant).all()\
session.query(MenuItem).all()\
session.query(Restaurant).first()	# first result; or iterate with for\
\

\b Update an item in db
\b0 \
1. Find entry\
	updated_things = session.query(Table).filter_by(column=\'91Value\'92)	# always returns a collection\
	print updated_things.id\
	print updated_things.val_to_change	# search for what you\'92re looking to update to check its value\
	print \'93\\n\'94\
2. Reset values\
	specific_row_to_update = session.query(Table).filter_by(id=n).one()\
	
\b specific_thing_to_update.val_to_change = new_value
\b0 \
3. 
\b session.add
\b0 (specific_row_to_update)\
4. 
\b session.commit
\b0 ()\
\

\b Delete an item in db
\b0 \
- Just as above, but with one tweak:\
1. Find entry\
2. 
\b session.delete
\b0 (entry)\
3. session.commit()\
	- you will now have a \'93no row was found\'94 error!\
\

\b Associations: Many-to-many, one-to-many, many-to-one
\b0 \
- A foreign key can point to how many rows in another table? (one to 
\b one/many
\b0 )\
	- e.g. each visitor can adopt multiple puppies\
- Flip the perspective: How many keys can relate to a key in another table? (
\b one/many
\b0  to one)\
	- e.g. multiple puppies can relate to each visitor\
- Can multiple keys relate to multiple other keys? (many to many)\
	- e.g. many animals can be cared for by many staff/care members\
- This is done with parent/child tables\
	- use 
\b backref
\b0  for bidirectional\
	- many-many adds an 
\b association_table
\b0  \
- If your associations table has more columns than the other object (table), define a 
\b class Association
\b0  to relate to these left and right tables\
	- my note: is this like dependency inversion?\
	- bidirectional: add backrefs to both relations\
\

\b DB Migrations
\b0 \
- on modifying structure, instead of deleting old database and repopulating with data, migrate existing to new structure\
- Flask migrate\
- SQLAlchemy-migrate\
}