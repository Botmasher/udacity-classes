{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww15080\viewh9460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 Data-driven web applications
\b0 \
- almost all of the sites you use on a daily basis\
- prereqs: OO Python, database and SQL, CSS and HTML to style, command line basics\
- use: ORM, frameworks (Flask), Vagrant\
\

\b CRUD\

\b0 - all actions a user takes on data-driven website\
- correspond to specific SQL keywords\
\

\b ORM: how to structure a DB-creating Python File
\b0 \
- imagine restaurant menu\
	- relation Restaurants: id, name\
	- relation for MenuItem: name, id, description, price, course (appetizer/main/dessert/beverage)\
- Pass queries as objects instead of strings\
	- allows for error checking\
	- transformed into query and sent to database\
	- SQL alchemy is FLOSS for Python\
	- already installed if using vagrant; otherwise visit their site\
- Using 
\b SQLAlchemy
\b0  for 
\b ORM
\b0 \
	(1) 
\b Configuration
\b0 : set up necessary modules\
		- doesn\'92t change much from project to project\
		- imports modules needed at beginning of file\
		- 
\b Base = declarative_base()
\b0  #base class pointing to declarative_base once imported\
		- creates instance of declarative base at beginning\
		- creates/connects database and adds tables and columns at end of file\
	(2) 
\b Class
\b0 : represents our data in Python\
	(3) 
\b Table
\b0 : represents the specific table in our database\
	(4) 
\b Mapper
\b0 : create vars for table columns; MUST add attribs! Example attributes:\
		- String(250), Integer, primary_key=True, relationship(Class), ForeignKey(\'93table.id\'94), etc.\
		- 
\b nullable = False
\b0 	# if this variable isn\'92t filled, we cannot create this row in the db\
- when you set a foreign key relationship, on the next line: 
\b table = relationship(Table)
\b0 \
\

\b How to CRUD with your new python DB (the one you just made above)
\b0 \
# you\'92ll first need to import some things\
from sqlalchemy import 
\b create_engine
\b0 \
from sqlalchemy.orm import 
\b sessionmaker
\b0 \
\
# our database, as described in the section above\
from database_setup import Base, Restaurant, Menu Item\
engine = create_engine(\'91sqlite:///restaurantmenu.db')\
Base.metadata.bind = engine\
\
# CRUD requires a session\
DBSession = sessionmaker (bind = engine)	# possibility to CRUD\
session = DBSession()	# open instance of the DBSession\
\
# now can call method from session\
# notice that we pass the first variable to the foreign key in the second table\
myFirstRestaurant = Restaurant(name=\'93Pizzeria Snausage\'94)\
cheese_pizza = MenuItem (name=\'93Cheese Pizza\'94, description = \'93Super fresh!\'94, course=\'93Entree\'94, price=\'939\'94, restaurant=myFirstRestaurant)\
\
# use session to store\
session.add(myFirstRestaurant)\
session.add(cheese_pizza)\
session.commit()\
\
# query to see objects exist\
session.query(Restaurant).all()\
session.query(MenuItem).all()\
session.query(Restaurant).first()	# first result; or iterate with for\
\

\b Update an item in db
\b0 \
1. Find entry\
	updated_things = session.query(Table).filter_by(column=\'91Value\'92)	# always returns a collection\
	print updated_things.id\
	print updated_things.val_to_change	# search for what you\'92re looking to update to check its value\
	print \'93\\n\'94\
2. Reset values\
	specific_row_to_update = session.query(Table).filter_by(id=n).one()\
	
\b specific_thing_to_update.val_to_change = new_value
\b0 \
3. 
\b session.add
\b0 (specific_row_to_update)\
4. 
\b session.commit
\b0 ()\
\

\b Delete an item in db
\b0 \
- Just as above, but with one tweak:\
1. Find entry\
2. 
\b session.delete
\b0 (entry)\
3. session.commit()\
	- you will now have a \'93no row was found\'94 error!\
\

\b Associations: Many-to-many, one-to-many, many-to-one
\b0 \
- A foreign key can point to how many rows in another table? (one to 
\b one/many
\b0 )\
	- e.g. each visitor can adopt multiple puppies\
- Flip the perspective: How many keys can relate to a key in another table? (
\b one/many
\b0  to one)\
	- e.g. multiple puppies can relate to each visitor\
- Can multiple keys relate to multiple other keys? (many to many)\
	- e.g. many animals can be cared for by many staff/care members\
- This is done with parent/child tables\
	- use 
\b backref
\b0  for bidirectional\
	- many-many adds an 
\b association_table
\b0  \
- If your associations table has more columns than the other object (table), define a 
\b class Association
\b0  to relate to these left and right tables\
	- my note: is this like dependency inversion?\
	- bidirectional: add backrefs to both relations\
\

\b DB Migrations
\b0 \
- on modifying structure, instead of deleting old database and repopulating with data, migrate existing to new structure\
- Flask migrate\
- SQLAlchemy-migrate\
\

\b Client Server Communications
\b0 \
- client wants info, server has info to share\
- client initiates a request, while a server responds with data the client requested\
- Protocols: grammatical rules all machines on internet can understand each other\
	- 
\b TCP
\b0  : info broken into small packets, sender/receiver can figure out which packets are missing (vs UDP)\
	- 
\b IP
\b0  : static or dynamic address assignment, DNS is a big online phonebook with web URLs by IP; ports are channels on same IP\
		- first 10000 ports are reserved for system use\
		- 80 and 8080 by convention are commonly used for web servers\
		- localhost is on the same machine (127.0.0.1), so OS knows to look on this machine and not go out to the internet\
	- 
\b HTTP
\b0  : client tells server what they want using an 
\b HTTP method
\b0 , and then gets back a reply in the form of 
\b status code
\b0  + resources\
		- 
\b GET
\b0  request tells server to send back information (\'93SAFE METHODS\'94)\
		- 
\b POST
\b0  request tells server to modify some information \
		- 200 successful GET\
		- 301 successful POST\
		- 404 file not found\

\b Build your own web server! (see webserver.py for example and notes)\

\b0 from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer\
- then in your code, you\'92ll have a HANDLER class and a MAIN() method. Let\'92s make some GET functionality here.\
	- main() instantiates and specifies what port it will listen on\
	- handler indicates code to execute based on type of HTTP request received by server\
	- notice that handler looks for URLs and can return different responses AND different content based on the URL\
- Now onto POST (do_POST), which codes similarly to how you used do_GET\
	- need to import 
\b cgi
\b0  (common gateway interface)\
	- don\'92t look for specific URL, just post response (301)\

\b Port Forwarding
\b0 \
- open vagrant file on local machine and add a new port forwarding line, changing the numbers as needed:\
	config.vm.network \'93forwarded_port\'94, guest: 5000, host: 5000\
\

\b Add CRUD operations to your Server to run restaurants database described at beginning of course
\b0 \
OBJECTIVES:\
	(1) opening localhost:8080/restaurants, user sees a list of all restaurants in database\
	(2) there should be a link to edit or delete each restaurant in the list - visible, but not yet working\
	(3) create new restaurants - link to form that does post request on restaurant name and adds to database\
	(4) rename a restaurant - enhance the web server to that users can rename restaurant and persist to db via post\
	(5) delete a restaurant - clicking link sends to confirmation page and also post to db to delete\
Added to before:\
	- you can get there from here! : do_GET can catch a URL (like /restaurants) and do_POST can redirect back to it on submit\
		# check if path, then run this 
\i\b after
\i0\b0  cgi parsing and any crud or other POST stuff\
		self.send_response(301)\
		self.send_header(\'91Content-type\'92, \'91text/html\'92)\
		
\b self.send_header(\'91Location\'92, \'91/url\'92)
\b0 \
		self.end_headers()\
\

\b FRAMEWORKS - Flask
\b0 \
Frameworks abstract away the repetitive and hard-to-manage aspects of building server app.\
		- still use sqlalchemy to access db\
		- templates organize your application by separating code\
		- Flask function 
\b url_for
\b0  builds URLs for app\
		- create forms \
		- 
\b message flashing
\b0  notifies user on successful db change\
		- use JSON messages instead of html\
		- style with CSS\
A basic Flask file - see commented flask-test.py in the vagrant directory!\
	- import flask\
	- 
\b decorators
\b0  are python @ functions that return functions. routes first. can write other ones like login checks\
	- decorators can be stacked, especially used for getting routes to point to same function\
Make paths dynamic by attaching 
\b rules
\b0 \
	@app.route(\'91restaurants/
\b <int:restaurant_id>
\b0 /\'91)\
	# looks for an integer restaurant_id, which can then be passed into function below the decorator\
	# trailing slash allows load even when not there\
Render a 
\b template
\b0  instead of just adding to an output string\
	render_template (templateName.html, kwargs)	 # include variables to pass to template as keyword arguments\
	- flask looks for templates in a folder named /templates/\
	- using 
\b html escaping
\b0 , can pass data directly from python code to template. \
	- \{% logical code %\}, like running a for loop\
	- \{\{printed code\}\}, like outputting a variable name\
URL building using 
\b url_for()\

\b0 	- Helper method returns complete url string\
	- takes the FUNCTION below the @app routes as the first arg to build this url\
	- passes kwargs to fill in any vars in the route url string\
	- allows you to change urls with method route declaration (all in one place!)\
POST - by default a route in Flask only responds to GET, so write a decorator-plus-function that handles the POST, too!\
	@app.route(\'91/path/<int:varName>/\'91, 
\b methods=[\'91GET\'92,\'92POST\'92]
\b0 )\
	def handlerFunction(varName):\
		
\b if request.method == \'91POST\'92:
\b0 \
			new_thing = OrmClassThing (name=
\b request.form[
\b0 \'91name\'92
\b ]
\b0 , associative_id = varName)\
			session.add(new_thing)\
			session.commit()\
			return 
\b redirect(url_for(mainFunction, kwarg1=value1, \'85))\
		return render_template(\'91templateName.html\'92, kwargs)\

\b0 	# then add form in the render_template with method=post, action=url_for(handlerFunction,varname=var), name=value\

\b Message Flashing
\b0  - 
\b feedback
\b0  to user, prompt message immediately after action takes place, but then disappears on another action\
	- import flash\
	- uses sessions (across multiple webpages), so must use 
\b app.key
\b0 \
	- flash(\'93message\'94) within control flow, then in template add a loop (see the flask test and edit.html for this combo in an example)\
\
\

\b Styles
\b0  in Flask with CSS\
	- /static/ folder\

\b Templates
\b0  for your main.html, forms.html, etc.\
	- /templates/ folder\
\

\b Responding with just the data!
\b0  - 
\b API
\b0  - if server just wants your data without all your css and \
RESTful API - communicated over the internet and following all the rules of HTTP\
JSON and attribute/value pairs sent across in RESTful API\
	- 
\b jsonify
\b0  in Flask\
	- in the appropriate DATABASE CLASS (ORM) add a property and function to handle the serializable structure\

\b 		@property\
		def serialize (self):\
			return \{\
				\'91name\'92 : self.name,\
				\'91id\'92 : self.id,\
			\}
\b0 \
	- now write an API Endpoint (GET)\
		
\b @app.route (\'91/url/<int:var>/JSON\'92)\
		def urlJSON (var):\

\b0 			result = session.query(Table).filter_by(id=var).all()
\b \
			return jsonify(MyJSONName=[i.serialize for i in result])
\b0 \
\

\b Extensions and extras for the app
\b0 \
- reconfiguring your Flask app as a 
\b package
\b0 \
	- instead of running from bottom of views.py\
	- in its own subfolder\
	- config.py in main folder\
	- run.py in main folder\
	- __init__.py in the subfolder\
	- make sure to set up the right imports\
- forms with 
\b WTForms
\b0 \
	- forms.py file with a class for each form\
	- separate forms template\
	- form_handlers template as well\
- logging with 
\b logger
\b0 \
	- app.logger, which is a python Logger\
	- import and set up handler (e.g. use log rotation if need to write to new file at certain size)\
	- set up app.logger level to match handler and add that handler\
- advanced logging\
	- write to syslog (standard)\
	- 
\b spunk
\b0  for managing, collecting, searching log data\
	- remote logging with a service like rsyslog or loggly (splunk does for large enterprises)\
	- log merging\
	- logging to multiple files:\
	{\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/9857284/how-to-configure-all-loggers-in-an-application"}}{\fldrslt http://stackoverflow.com/questions/9857284/how-to-configure-all-loggers-in-an-application}}\
- e
\b mail
\b0 ing user\
	- {\field{\*\fldinst{HYPERLINK "https://pythonhosted.org/flask-mail/"}}{\fldrslt https://pythonhosted.org/flask-mail/}}\
	- note the misspelling: it\'92s flask DOT ext.mail\
	- __init__ in the app package:\
	from flask.ext.mail import Mail\
	appmail = Mail(app)\
	- views.py:\
	# import\
	from mail.message import Message\
	# in the right branch\
	structure message with mssg = Message (\'91some text!\'92, sender=(\'91name\'92,\'92me@mail.com\'92), recipients=[\'91\'92you@mail.com\'92])\
	then send message with appmail.send (mssg)\
- user authentication\
	- refer to Udacity\'92s 
\b Authentication and Authorization
\b0  course\
	- {\field{\*\fldinst{HYPERLINK "https://flask-login.readthedocs.org/en/latest/"}}{\fldrslt https://flask-login.readthedocs.org/en/latest/}}\
- 
\b testing
\b0 \
	- Flask-Testing - install then import then write test classes that inherit from TestCase\
	- python unittest package\
	- use Coverage to determine how much of code was accessed}